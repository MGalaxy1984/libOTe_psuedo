from Block import Block
from PseudoAES import PseudoAES

aes = [PseudoAES(3242342), PseudoAES(8993849)]
num_threads = 1
m_pnt_count = 128
m_value = []


class TreeNode:
    data = []

    def __init__(self, input_list: list[Block]):
        if not input_list:
            for i in range(8):
                self.data.append(Block(0))
        else:
            self.data = input_list


def component(delta: Block, seed: Block, output: list[Block]):
    """
    :param delta: INPUT a block. Generated by PRNG in the silentSend() function
    :param seed: INPUT a block. Generated by PRNG as the seed of GGM tree
    :param output: OUTPUT a list of blocks. A sublist of mB vector (size = mSizePer * mNumPartitions)
    """
    for i in range(0, 128, 8):
        print(i)


def pre_component(delta: Block):
    for i in range(128):
        m_value.append(Block(delta))


def b_component(root: list[Block]):
    levels = [[root], [], [], []]
    for i in range(0, 3):
        for j in range(1 << i):
            tmp = levels[i][j]
            left = aes[0].encrypt_8_blocks(tmp)
            for k in range(8):
                left[k] ^= tmp[k]
            right = aes[1].encrypt_8_blocks(tmp)
            for k in range(8):
                right[k] ^= tmp[k]
            levels[i + 1].append(left)
            levels[i + 1].append(right)
    for i in range(8):
        for j in range(8):
            print(levels[3][i][j])




# for n = 1024
def test():
    n = 1024
    delta = Block(0)
    seed = Block(0)
    output = []
    for i in range(n):
        output.append(Block(0))
    # component(delta, seed, output)
    for g in range(0, 128, 8):
        fi = open(f'E:\PycharmProjects\libOTe_psuedo\DataFiles\sender_expand_input_root_round_{g}.txt')
        root = []
        for i in range(8):
            line = fi.readline()
            root.append(Block(int("0x" + line.rstrip(), 16)))
        b_component(root)
